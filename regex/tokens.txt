# Tokens for C
-WHITESPACE:	[ \t\n]+
SLASSIGN:	<<=
SRASSIGN:	>>=
ELLIPSE:	...
REL_LTEQ:	<=
REL_GTEQ:	>=
SHIFTLEFT:	<<
SHIFTRIGHT:	>>
INCREMENT:	++
DECREMENT:	--
TEST_EQ:	==
TEST_NEQ:	!=
ASSIGN_MULT:	*=
ASSIGN_DIV:	/=
ASSIGN_MOD:	%=
ASSIGN_PLUS:	+=
ASSIGN_MINUS:	-=
ASSIGN_AND:	&=
ASSIGN_XOR:	^=
ASSIGN_OR:	|=
LOGIAL_OR:	||
LOGIAL_AND:	&&
STRUCTPOINTER:	->
QUESTION:	?
SEMICOLON:	;
LBRACE:		{
RBRACE:		}
COMMA:		,
EQUAL:		=
COLON:		:
LPAREN:		(
RPAREN:		)
LBRACKET:	[
RBRACKET:	]
ASTERISK:	*
PIPE:		|
CIRCUMFLEX:	^
AMPERSAND:	&
LCHEVERON:	<
RCHEVRON:	>
PLUS:		+
MINUS:		-
SLASH:		/
PERCENT:	%
TILDE:		~
BANG:		!
PERIOD:		.

# Keywords:
SIZEOF:		sizeof
CASE:		case
DEFAULT:	default
IF:		if
ELSE:		else
SWITCH:		switch
WHILE:		while
DO:		do
FOR:		for
GOTO:		goto
CONTINUE:	continue
BREAK:		break
RETURN:		return
AUTO:		auto
REGISTER:	register
STATIC:		static
EXTERN:		extern
TYPEDEF:	typedef
VOID:		void
CHAR:		char
SHORT:		short
INT:		int
LONG:		long
FLOAT:		float
DOUBLE:		double
UNSIGNED:	unsigned
CONST:		const
VOLATILE:	volatile
STRUCT:		struct
UNION:		union
ENUM:		enum


IDENTIFIER:		[_a-zA-Z][_a-zA-Z0-9]*
STRING_LITERAL:		"[^"]"
INTEGER_CONSTANT:	[0-9]+
CHARACTER_CONSTANT:	'[^']|\\[^x]*|\\'
FLOAT_CONSTANT:		[0-9]+\.[0-9]+(e(+|-)?[1-9][0-9]*)?
# ENUMERATION-CONSTANT:	# lexer hack
# TYPDEF_NAME:		# lexer hack
