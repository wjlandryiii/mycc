	   <translation-unit> ::= <external-declaration>
				| <translation-unit> <external-declaration>

       <external-declaration> ::= <function-definition>
				| <declaration>

	<function-definition> ::= opt(<declaration-specifiers>) <declarator> opt(declaration-list) <compound-statment>

		<declaration> ::= <declaration-specifiers> opt(<init-declarator-list>) ";"

	   <declaration-list> ::= <declaration>
				| <declaration-list> <declaration>

     <declaration-specifiers> ::= <storage-class-specifier> opt(<declaration-specifiers>)
				| <type-specifier> opt(<declaration-specifiers>)
				| <type-qualifier> opt(<declaration-specifiers>)

    <storage-class-specifier> ::= "auto" | "register" | "static" | "extern" | "typedef"

	     <type-specifier> ::= "void" | "char" | "short" | "int" | "long" | "float" | "double"
				| "unsigned" | <struct-or-union-specifier> | <enum-specifier> | <typedef-name>

	     <type-qualifier> ::= "const" | "volatile"

  <struct-or-union-specifier> ::= <struct-or-union> opt(<identifier>) "{" <struct-declaration-list> "}"
				| <struct-or-union> <identifier>

	    <struct-or-union> ::= "struct" | "union"

    <struct-declaration-list> ::= <struct-declaration>
				| <struct-declaration-list> <struct-declaration>

       <init-declarator-list> ::= <init-declarator>
				| <init-declarator-list> "," <init-declarator>

	    <init-declarator> ::= <declarator>
				| <declarator> "=" <initializer>

	 <struct-declaration> ::= <specifier-qualifier-list> <struct-declarator-list> ";"

   <specifier-qualifier-list> ::= <type-specifier> opt(<specifier-qualifier-list>)
				| <type-qualifier> opt(<specifier-qualifier-list>)

     <struct-declarator-list> ::= <struct-declarator>
				| <struct-declarator-list> "," <struct-declarator>

	  <struct-declarator> ::= <declarator>
				| opt(<declarator>) ":" <constant-expression>

	     <enum-specifier> ::= "enum" opt(<identifier>) "{" <enumerator-list> "}"
				| "enum" <identifier>

<enumerator-list> ::=
	<enumerator>
	| <enumerator-list> "," <enumerator>

<enumerator> ::=
	<identifier>
	| <identifier> "=" <constant-expression>

<declarator> ::=
	opt(<pointer>) <direct-declarator>

<direct-declarator> ::=
	<identifier>
	| "(" <declarator ")"
	| <direct-declarator> "[" opt(<constant-expression>) "]"
	| <direct-declarator> "(" <parameter-type-list> ")"
	| <direct-declarator> "(" opt(<identifier-list>) ")"

<pointer> ::=
	"*" opt(<type-qualifier-list>)
	| "*" opt(<type-qualifier-list>) <pointer>

<type-qualifier-list> ::=
	<type-qualifier>
	| <type-qualifier-list> <type-qualifier>

<parameter-type-list> ::=
	<parameter-list>
	| <parameter-list> "," "..."

<parameter-list> ::=
	<parameter-declaration>
	| <parameter-list> "," <parameter-declaration>

<parameter-declaration> ::=
	<declaration-specifiers> <declarator>
	| <declaration-specifiers> opt(<abstract-declarator>)

<identifier-list> ::=
	<identifier>
	| <identifier-list> "," <identifier>

<initializer> ::=
	<assignment-expression>
	| "{" <initializer-list> "}"
	| "{" <initializer-list> "," "}"

<initializer-list> ::=
	<initializer>
	| <initializer-list> "," <initializer>

<type-name> ::=
	<specifier-qualifier-list> opt(<abstract-declarator>)

<abstract-declarator> ::=
	<pointer>
	opt(<pointer>) <direct-abstract-declarator>

<direct-abstract-declarator> ::=
	"(" <abstract-declarator> ")"
	| opt(<direct-abstract-declarator>) "[" opt(<constant-expression>) "]"
	| opt(<direct-abstract-declarator>) "(" opt(<parameter-type-list>) ")"

<typedef-name> ::= <identifier>

<statement> ::=
	<labeled-statement>
	| <expression-statement>
	| <compound-statement>
	| <selection-statement>
	| <iteration-statement>
	| <jump-statement>

<labeled-statement> ::=
	<identifier> ":" <statement>
	| "case" <constant-expression> ":" <statement>
	| "default" ":" <statement>

<expression-statement> ::= opt(<expression>) ";"

<compound-statement> ::= "{" opt(<declaration-list>) opt(<statement-list>) "}"

<statement-list> ::=
	<statement>
	| <statement-list> <statement>

<selection-statement> ::=
	"if" "(" <expression> ")" <statement>
	| "if" "(" <expression> ")" <statement> "else" <statement>
	| "switch" "(" <expression> ")" <statement>

<iteration-statement> ::=
	"while" "(" <expression> ")" <statement>
	| "do" <statement> "while" "(" <expression> ")" ";"
	| "for" "(" opt(<expression>) ";" opt(<expression>) ";" opt(<expression>) ")" <statement>

<jump-statement> ::=
	"goto" <identifier> ";"
	| "continue" ";"
	| "break" ";"
	| "return" opt(<expression>) ";"

<expression> ::=
	<assignment-expression>
	| <expression> "," <assignment-expression>

<assignment-expression> ::=
	<conditional-expression>
	| <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="

<conditional-expression> ::=
	<logical-OR-expression>
	| <logical-OR-expression> "?" <expression> ":" <conditional-expression>

<constant-expression> ::= <conditional-expression>

<logical-OR-expression> ::=
	<logical-AND-expression>
	| <logical-OR-expression> "||" <logical-AND-expression>

<logical-AND-expression> ::=
	<inclusive-OR-expression>
	| <logical-AND-expression> "&&" <inclusive-OR-operation>

<inclusive-OR-expression> ::=
	<exclusive-OR-expression>
	| <inclusive-OR-expression> "|" <exclusive-OR-expression>

<exclusive-OR-expression> ::=
	<AND-expression>
	| <exclusive-OR-expression> "^" <AND-expression>

<AND-expression> ::=
	<equality-expression>
	| <AND-expression> "&" <equality-expression>

<equality-expression> ::=
	<relational-expression>
	| <equality-expression> "==" <relational-expression>
	| <equality-expression> "!=" <relational-expression>

<relational-expression> ::=
	<shift-expression>
	| <relational-expression> "<" <shift-expression>
	| <relational-expression> ">" <shift-expression>
	| <relational-expression> "<=" <shift-expression>
	| <relational-expression> ">=" <shift-expression>

<shift-expression> ::=
	<additive-expression>
	| <shift-expression> "<<" <additive-expression>
	| <shift-expression> ">>" <additive-expression>

<additive-expression> ::=
	<multiplicative-expression>
	| <additive-expression> "+" <multiplicative-expression>
	| <additive-expression> "-" <multiplicative-expression>

<multiplicative-expression> ::=
	<cast-expression>
	| <multiplicative-expression> "*" <cast-expression>
	| <multiplicative-expression> "/" <cast-expression>
	| <multiplicative-expression> "%" <cast-expression>

<cast-expression> ::=
	<unary-expression>
	| "(" <type-name> ")" <cast-expression>

<unary-expression> ::=
	<postfix-expression>
	| "++" <unary-expression>
	| "--" <unary-expression>
	| <unary-operator> <cast-expression>
	| "sizeof" <unary-expression>
	| "sizeof" "(" <type-name> ")"

<unary-operator> ::= "&" | "*" | "+" | "-" | "~" | "!"

<postfix-expression> ::=
	<primary-expression>
	| <postfix-expression> "[" <expression> "]"
	| <postfix-expression> "(" opt(<argument-expression-list>) ")"
	| <postfix-expression> "." <identifier>
	| <postfix-expression> "->" <identifier>
	| <postfix-expression> "++"
	| <postfix-expression> "--"

<primary-expression> ::=
	<identifier>
	| <constant>
	| <string>
	| "(" <expression> ")"

<argument-expression-list> ::=
	<assignment-expression>
	| <argument-expression-list> "," <assignment-expression>

<constant> ::=
	<integer-constant>
	| <character-constant>
	| <float-constant>
	| <enumeration-constant>

